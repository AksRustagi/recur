// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plan.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Interval int32

const (
	Interval_Day   Interval = 0
	Interval_Week  Interval = 1
	Interval_Month Interval = 2
	Interval_Year  Interval = 3
)

var Interval_name = map[int32]string{
	0: "Day",
	1: "Week",
	2: "Month",
	3: "Year",
}
var Interval_value = map[string]int32{
	"Day":   0,
	"Week":  1,
	"Month": 2,
	"Year":  3,
}

func (x Interval) String() string {
	return proto.EnumName(Interval_name, int32(x))
}
func (Interval) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type PlanResponse struct {
	// Types that are valid to be assigned to Responses:
	//	*PlanResponse_Error
	//	*PlanResponse_Response
	Responses isPlanResponse_Responses `protobuf_oneof:"responses"`
}

func (m *PlanResponse) Reset()                    { *m = PlanResponse{} }
func (m *PlanResponse) String() string            { return proto.CompactTextString(m) }
func (*PlanResponse) ProtoMessage()               {}
func (*PlanResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type isPlanResponse_Responses interface {
	isPlanResponse_Responses()
}

type PlanResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,oneof"`
}
type PlanResponse_Response struct {
	Response *PlanSuccess `protobuf:"bytes,2,opt,name=response,oneof"`
}

func (*PlanResponse_Error) isPlanResponse_Responses()    {}
func (*PlanResponse_Response) isPlanResponse_Responses() {}

func (m *PlanResponse) GetResponses() isPlanResponse_Responses {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *PlanResponse) GetError() *Error {
	if x, ok := m.GetResponses().(*PlanResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (m *PlanResponse) GetResponse() *PlanSuccess {
	if x, ok := m.GetResponses().(*PlanResponse_Response); ok {
		return x.Response
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PlanResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PlanResponse_OneofMarshaler, _PlanResponse_OneofUnmarshaler, _PlanResponse_OneofSizer, []interface{}{
		(*PlanResponse_Error)(nil),
		(*PlanResponse_Response)(nil),
	}
}

func _PlanResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PlanResponse)
	// responses
	switch x := m.Responses.(type) {
	case *PlanResponse_Error:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *PlanResponse_Response:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Response); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PlanResponse.Responses has unexpected type %T", x)
	}
	return nil
}

func _PlanResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PlanResponse)
	switch tag {
	case 1: // responses.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Responses = &PlanResponse_Error{msg}
		return true, err
	case 2: // responses.response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlanSuccess)
		err := b.DecodeMessage(msg)
		m.Responses = &PlanResponse_Response{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PlanResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PlanResponse)
	// responses
	switch x := m.Responses.(type) {
	case *PlanResponse_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlanResponse_Response:
		s := proto.Size(x.Response)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PlanSuccess struct {
	Id                  string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Object              string            `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
	Amount              uint64            `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Created             int64             `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
	Currency            Currency          `protobuf:"varint,5,opt,name=currency,enum=Currency" json:"currency,omitempty"`
	Interval            Interval          `protobuf:"varint,6,opt,name=interval,enum=Interval" json:"interval,omitempty"`
	IntervalCount       int32             `protobuf:"varint,7,opt,name=interval_count,json=intervalCount" json:"interval_count,omitempty"`
	Livemode            bool              `protobuf:"varint,8,opt,name=livemode" json:"livemode,omitempty"`
	Metadata            map[string]string `protobuf:"bytes,9,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                string            `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	StatementDescriptor string            `protobuf:"bytes,11,opt,name=statement_descriptor,json=statementDescriptor" json:"statement_descriptor,omitempty"`
	TrialPeriodDays     int32             `protobuf:"varint,12,opt,name=trial_period_days,json=trialPeriodDays" json:"trial_period_days,omitempty"`
}

func (m *PlanSuccess) Reset()                    { *m = PlanSuccess{} }
func (m *PlanSuccess) String() string            { return proto.CompactTextString(m) }
func (*PlanSuccess) ProtoMessage()               {}
func (*PlanSuccess) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PlanSuccess) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlanSuccess) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *PlanSuccess) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PlanSuccess) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *PlanSuccess) GetCurrency() Currency {
	if m != nil {
		return m.Currency
	}
	return Currency_UNK
}

func (m *PlanSuccess) GetInterval() Interval {
	if m != nil {
		return m.Interval
	}
	return Interval_Day
}

func (m *PlanSuccess) GetIntervalCount() int32 {
	if m != nil {
		return m.IntervalCount
	}
	return 0
}

func (m *PlanSuccess) GetLivemode() bool {
	if m != nil {
		return m.Livemode
	}
	return false
}

func (m *PlanSuccess) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PlanSuccess) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlanSuccess) GetStatementDescriptor() string {
	if m != nil {
		return m.StatementDescriptor
	}
	return ""
}

func (m *PlanSuccess) GetTrialPeriodDays() int32 {
	if m != nil {
		return m.TrialPeriodDays
	}
	return 0
}

type CreatePlanRequest struct {
	Id                  string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Amount              uint64            `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Currency            Currency          `protobuf:"varint,3,opt,name=currency,enum=Currency" json:"currency,omitempty"`
	Interval            Interval          `protobuf:"varint,4,opt,name=interval,enum=Interval" json:"interval,omitempty"`
	Name                string            `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	IntervalCount       int32             `protobuf:"varint,6,opt,name=interval_count,json=intervalCount" json:"interval_count,omitempty"`
	Metadata            map[string]string `protobuf:"bytes,7,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StatementDescriptor string            `protobuf:"bytes,8,opt,name=statement_descriptor,json=statementDescriptor" json:"statement_descriptor,omitempty"`
	TrialPeriodDays     int32             `protobuf:"varint,9,opt,name=trial_period_days,json=trialPeriodDays" json:"trial_period_days,omitempty"`
}

func (m *CreatePlanRequest) Reset()                    { *m = CreatePlanRequest{} }
func (m *CreatePlanRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePlanRequest) ProtoMessage()               {}
func (*CreatePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *CreatePlanRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreatePlanRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CreatePlanRequest) GetCurrency() Currency {
	if m != nil {
		return m.Currency
	}
	return Currency_UNK
}

func (m *CreatePlanRequest) GetInterval() Interval {
	if m != nil {
		return m.Interval
	}
	return Interval_Day
}

func (m *CreatePlanRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreatePlanRequest) GetIntervalCount() int32 {
	if m != nil {
		return m.IntervalCount
	}
	return 0
}

func (m *CreatePlanRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *CreatePlanRequest) GetStatementDescriptor() string {
	if m != nil {
		return m.StatementDescriptor
	}
	return ""
}

func (m *CreatePlanRequest) GetTrialPeriodDays() int32 {
	if m != nil {
		return m.TrialPeriodDays
	}
	return 0
}

type GetPlanRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetPlanRequest) Reset()                    { *m = GetPlanRequest{} }
func (m *GetPlanRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPlanRequest) ProtoMessage()               {}
func (*GetPlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *GetPlanRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdatePlanRequest struct {
	Id                  string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Metadata            map[string]string `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	StatementDescriptor string            `protobuf:"bytes,4,opt,name=statement_descriptor,json=statementDescriptor" json:"statement_descriptor,omitempty"`
	TrialPeriodDays     int32             `protobuf:"varint,5,opt,name=trial_period_days,json=trialPeriodDays" json:"trial_period_days,omitempty"`
}

func (m *UpdatePlanRequest) Reset()                    { *m = UpdatePlanRequest{} }
func (m *UpdatePlanRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePlanRequest) ProtoMessage()               {}
func (*UpdatePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *UpdatePlanRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdatePlanRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *UpdatePlanRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdatePlanRequest) GetStatementDescriptor() string {
	if m != nil {
		return m.StatementDescriptor
	}
	return ""
}

func (m *UpdatePlanRequest) GetTrialPeriodDays() int32 {
	if m != nil {
		return m.TrialPeriodDays
	}
	return 0
}

type DeletePlanRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeletePlanRequest) Reset()                    { *m = DeletePlanRequest{} }
func (m *DeletePlanRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePlanRequest) ProtoMessage()               {}
func (*DeletePlanRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *DeletePlanRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeletePlanResponse struct {
	Deleted bool   `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *DeletePlanResponse) Reset()                    { *m = DeletePlanResponse{} }
func (m *DeletePlanResponse) String() string            { return proto.CompactTextString(m) }
func (*DeletePlanResponse) ProtoMessage()               {}
func (*DeletePlanResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *DeletePlanResponse) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *DeletePlanResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListFilter struct {
	Gt  int64 `protobuf:"varint,1,opt,name=gt" json:"gt,omitempty"`
	Gte int64 `protobuf:"varint,2,opt,name=gte" json:"gte,omitempty"`
	Lt  int64 `protobuf:"varint,3,opt,name=lt" json:"lt,omitempty"`
	Lte int64 `protobuf:"varint,4,opt,name=lte" json:"lte,omitempty"`
}

func (m *ListFilter) Reset()                    { *m = ListFilter{} }
func (m *ListFilter) String() string            { return proto.CompactTextString(m) }
func (*ListFilter) ProtoMessage()               {}
func (*ListFilter) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *ListFilter) GetGt() int64 {
	if m != nil {
		return m.Gt
	}
	return 0
}

func (m *ListFilter) GetGte() int64 {
	if m != nil {
		return m.Gte
	}
	return 0
}

func (m *ListFilter) GetLt() int64 {
	if m != nil {
		return m.Lt
	}
	return 0
}

func (m *ListFilter) GetLte() int64 {
	if m != nil {
		return m.Lte
	}
	return 0
}

type ListRequest struct {
	Created       *ListFilter `protobuf:"bytes,1,opt,name=created" json:"created,omitempty"`
	EndingBefore  string      `protobuf:"bytes,2,opt,name=ending_before,json=endingBefore" json:"ending_before,omitempty"`
	StartingAfter string      `protobuf:"bytes,3,opt,name=starting_after,json=startingAfter" json:"starting_after,omitempty"`
	Limit         int32       `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *ListRequest) GetCreated() *ListFilter {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *ListRequest) GetEndingBefore() string {
	if m != nil {
		return m.EndingBefore
	}
	return ""
}

func (m *ListRequest) GetStartingAfter() string {
	if m != nil {
		return m.StartingAfter
	}
	return ""
}

func (m *ListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterType((*PlanResponse)(nil), "PlanResponse")
	proto.RegisterType((*PlanSuccess)(nil), "PlanSuccess")
	proto.RegisterType((*CreatePlanRequest)(nil), "CreatePlanRequest")
	proto.RegisterType((*GetPlanRequest)(nil), "GetPlanRequest")
	proto.RegisterType((*UpdatePlanRequest)(nil), "UpdatePlanRequest")
	proto.RegisterType((*DeletePlanRequest)(nil), "DeletePlanRequest")
	proto.RegisterType((*DeletePlanResponse)(nil), "DeletePlanResponse")
	proto.RegisterType((*ListFilter)(nil), "ListFilter")
	proto.RegisterType((*ListRequest)(nil), "ListRequest")
	proto.RegisterEnum("Interval", Interval_name, Interval_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Plan service

type PlanClient interface {
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*PlanResponse, error)
	CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*PlanResponse, error)
	DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error)
	GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*PlanResponse, error)
	ListPlans(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Plan_ListPlansClient, error)
}

type planClient struct {
	cc *grpc.ClientConn
}

func NewPlanClient(cc *grpc.ClientConn) PlanClient {
	return &planClient{cc}
}

func (c *planClient) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*PlanResponse, error) {
	out := new(PlanResponse)
	err := grpc.Invoke(ctx, "/Plan/UpdatePlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*PlanResponse, error) {
	out := new(PlanResponse)
	err := grpc.Invoke(ctx, "/Plan/CreatePlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error) {
	out := new(DeletePlanResponse)
	err := grpc.Invoke(ctx, "/Plan/DeletePlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*PlanResponse, error) {
	out := new(PlanResponse)
	err := grpc.Invoke(ctx, "/Plan/GetPlan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planClient) ListPlans(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Plan_ListPlansClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Plan_serviceDesc.Streams[0], c.cc, "/Plan/ListPlans", opts...)
	if err != nil {
		return nil, err
	}
	x := &planListPlansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Plan_ListPlansClient interface {
	Recv() (*PlanResponse, error)
	grpc.ClientStream
}

type planListPlansClient struct {
	grpc.ClientStream
}

func (x *planListPlansClient) Recv() (*PlanResponse, error) {
	m := new(PlanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Plan service

type PlanServer interface {
	UpdatePlan(context.Context, *UpdatePlanRequest) (*PlanResponse, error)
	CreatePlan(context.Context, *CreatePlanRequest) (*PlanResponse, error)
	DeletePlan(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error)
	GetPlan(context.Context, *GetPlanRequest) (*PlanResponse, error)
	ListPlans(*ListRequest, Plan_ListPlansServer) error
}

func RegisterPlanServer(s *grpc.Server, srv PlanServer) {
	s.RegisterService(&_Plan_serviceDesc, srv)
}

func _Plan_UpdatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).UpdatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plan/UpdatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).UpdatePlan(ctx, req.(*UpdatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_CreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plan/CreatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).CreatePlan(ctx, req.(*CreatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_DeletePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).DeletePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plan/DeletePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).DeletePlan(ctx, req.(*DeletePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Plan/GetPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServer).GetPlan(ctx, req.(*GetPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plan_ListPlans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlanServer).ListPlans(m, &planListPlansServer{stream})
}

type Plan_ListPlansServer interface {
	Send(*PlanResponse) error
	grpc.ServerStream
}

type planListPlansServer struct {
	grpc.ServerStream
}

func (x *planListPlansServer) Send(m *PlanResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Plan_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Plan",
	HandlerType: (*PlanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePlan",
			Handler:    _Plan_UpdatePlan_Handler,
		},
		{
			MethodName: "CreatePlan",
			Handler:    _Plan_CreatePlan_Handler,
		},
		{
			MethodName: "DeletePlan",
			Handler:    _Plan_DeletePlan_Handler,
		},
		{
			MethodName: "GetPlan",
			Handler:    _Plan_GetPlan_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPlans",
			Handler:       _Plan_ListPlans_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plan.proto",
}

func init() { proto.RegisterFile("plan.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xcf, 0x8e, 0xe3, 0x44,
	0x10, 0xc6, 0x63, 0x3b, 0x4e, 0xec, 0x72, 0x92, 0x4d, 0x7a, 0x57, 0xc8, 0xca, 0x01, 0x59, 0x5e,
	0x8d, 0x14, 0x0d, 0xc8, 0x62, 0x83, 0x04, 0x08, 0x10, 0x12, 0x3b, 0x59, 0x58, 0x24, 0x56, 0x1a,
	0x35, 0x42, 0x88, 0x53, 0xd4, 0x63, 0xd7, 0x06, 0x33, 0x8e, 0x1d, 0xda, 0x9d, 0x91, 0x72, 0xe3,
	0x15, 0xb8, 0x70, 0xe4, 0xd9, 0x78, 0x94, 0x55, 0xb7, 0xdb, 0x8e, 0x47, 0x9e, 0xbf, 0x87, 0xb9,
	0x75, 0x7d, 0xf5, 0xb5, 0x5d, 0xae, 0x5f, 0x77, 0x19, 0x60, 0x97, 0xb1, 0x3c, 0xda, 0xf1, 0x42,
	0x14, 0xf3, 0x69, 0xbc, 0xe7, 0x1c, 0xf3, 0x38, 0xc5, 0x52, 0x2b, 0x1e, 0x72, 0x5e, 0xf0, 0x2a,
	0x08, 0x37, 0x30, 0x3a, 0xcf, 0x58, 0x4e, 0xb1, 0xdc, 0x15, 0x79, 0x89, 0xe4, 0x63, 0xb0, 0x55,
	0xda, 0x37, 0x02, 0x63, 0xe1, 0x2d, 0x07, 0xd1, 0x1b, 0x19, 0xbd, 0xed, 0xd1, 0x4a, 0x26, 0xa7,
	0xe0, 0x70, 0xed, 0xf5, 0x4d, 0x65, 0x19, 0x45, 0xf2, 0x01, 0xbf, 0xec, 0xe3, 0x18, 0xcb, 0xf2,
	0x6d, 0x8f, 0x36, 0xf9, 0xd7, 0x1e, 0xb8, 0xf5, 0xba, 0x0c, 0xff, 0xb7, 0xc0, 0x6b, 0x19, 0xc9,
	0x04, 0xcc, 0x34, 0x51, 0x6f, 0x71, 0xa9, 0x99, 0x26, 0xe4, 0x23, 0x18, 0x14, 0x17, 0x7f, 0x62,
	0x2c, 0xd4, 0x63, 0x5d, 0xaa, 0x23, 0xa9, 0xb3, 0x6d, 0xb1, 0xcf, 0x85, 0x6f, 0x05, 0xc6, 0xa2,
	0x4f, 0x75, 0x44, 0x7c, 0x18, 0xc6, 0x1c, 0x99, 0xc0, 0xc4, 0xef, 0x07, 0xc6, 0xc2, 0xa2, 0x75,
	0x48, 0x4e, 0xc0, 0xd1, 0xdf, 0x7c, 0xf0, 0xed, 0xc0, 0x58, 0x4c, 0x96, 0x6e, 0x74, 0xa6, 0x05,
	0xda, 0xa4, 0xa4, 0x2d, 0xcd, 0x05, 0xf2, 0x2b, 0x96, 0xf9, 0x03, 0x6d, 0xfb, 0x49, 0x0b, 0xb4,
	0x49, 0x91, 0x13, 0x98, 0xd4, 0xeb, 0x75, 0xac, 0xea, 0x18, 0x06, 0xc6, 0xc2, 0xa6, 0xe3, 0x5a,
	0x3d, 0x53, 0xe5, 0xcc, 0xc1, 0xc9, 0xd2, 0x2b, 0xdc, 0x16, 0x09, 0xfa, 0x4e, 0x60, 0x2c, 0x1c,
	0xda, 0xc4, 0xe4, 0x0b, 0x70, 0xb6, 0x28, 0x58, 0xc2, 0x04, 0xf3, 0xdd, 0xc0, 0x5a, 0x78, 0xcb,
	0x79, 0xbb, 0x67, 0xd1, 0x3b, 0x9d, 0x7c, 0x93, 0x0b, 0x7e, 0xa0, 0x8d, 0x97, 0x10, 0xe8, 0xe7,
	0x6c, 0x8b, 0x3e, 0xa8, 0x86, 0xa8, 0x35, 0x79, 0x05, 0x2f, 0x4a, 0xc1, 0x04, 0x6e, 0x31, 0x17,
	0xeb, 0x04, 0xcb, 0x98, 0xa7, 0x3b, 0x51, 0x70, 0xdf, 0x53, 0x9e, 0xe7, 0x4d, 0x6e, 0xd5, 0xa4,
	0xc8, 0x29, 0xcc, 0x04, 0x4f, 0x59, 0xb6, 0xde, 0x21, 0x4f, 0x8b, 0x64, 0x9d, 0xb0, 0x43, 0xe9,
	0x8f, 0xd4, 0x47, 0x3c, 0x53, 0x89, 0x73, 0xa5, 0xaf, 0xd8, 0xa1, 0x9c, 0x7f, 0x03, 0xe3, 0x6b,
	0xd5, 0x90, 0x29, 0x58, 0x97, 0x78, 0xd0, 0x9c, 0xe4, 0x92, 0xbc, 0x00, 0xfb, 0x8a, 0x65, 0x7b,
	0xd4, 0x9c, 0xaa, 0xe0, 0x6b, 0xf3, 0x2b, 0x23, 0xfc, 0xcf, 0x82, 0xd9, 0x99, 0x82, 0x50, 0x1d,
	0xa9, 0xbf, 0xf6, 0x58, 0x8a, 0x9b, 0x40, 0x6b, 0xa0, 0xe6, 0x35, 0xa0, 0x6d, 0x6c, 0xd6, 0xc3,
	0xb0, 0xf5, 0x6f, 0xc7, 0x56, 0xf7, 0xce, 0x6e, 0xf5, 0xae, 0x8b, 0x72, 0x70, 0x13, 0xca, 0x6f,
	0x5b, 0xb8, 0x86, 0x0a, 0x57, 0x10, 0x75, 0x3e, 0xeb, 0x56, 0x68, 0xb7, 0x01, 0x72, 0x1e, 0x09,
	0xc8, 0x7d, 0x02, 0x40, 0x01, 0x4c, 0x7e, 0x44, 0x71, 0x07, 0x9c, 0xf0, 0x1f, 0x13, 0x66, 0xbf,
	0xee, 0x92, 0x7b, 0x10, 0xb6, 0x3b, 0x64, 0xea, 0x0e, 0x75, 0x76, 0xdd, 0x7b, 0xac, 0xad, 0x07,
	0x1c, 0xeb, 0xfe, 0x23, 0xbb, 0x66, 0x3f, 0x41, 0xd7, 0x5e, 0xc2, 0x6c, 0x85, 0x19, 0xde, 0xd9,
	0x92, 0xf0, 0x3b, 0x20, 0x6d, 0x93, 0x9e, 0xa6, 0x3e, 0x0c, 0x13, 0xa5, 0x56, 0x56, 0x87, 0xd6,
	0xa1, 0xde, 0x6f, 0x36, 0xfb, 0xcf, 0x01, 0x7e, 0x4e, 0x4b, 0xf1, 0x43, 0x9a, 0x09, 0xe4, 0x32,
	0xbb, 0x11, 0x6a, 0x8b, 0x45, 0xcd, 0x8d, 0x90, 0xe5, 0x6e, 0x44, 0x55, 0x9a, 0x45, 0xe5, 0x52,
	0x3a, 0xb2, 0x6a, 0x24, 0x5a, 0xd4, 0xcc, 0x94, 0x23, 0x13, 0xa8, 0x47, 0xa1, 0x5c, 0x86, 0xff,
	0x1a, 0xe0, 0xc9, 0x47, 0xd6, 0x15, 0x9f, 0x1c, 0x07, 0x66, 0x35, 0xdb, 0xbd, 0xe8, 0xf8, 0xc6,
	0xe3, 0xf4, 0x7c, 0x09, 0x63, 0xcc, 0x93, 0x34, 0xdf, 0xac, 0x2f, 0xf0, 0x7d, 0xc1, 0xeb, 0x7e,
	0x8c, 0x2a, 0xf1, 0xb5, 0xd2, 0xe4, 0x4d, 0x2a, 0x05, 0xe3, 0x42, 0xda, 0xd8, 0x7b, 0x81, 0x5c,
	0xc3, 0x1c, 0xd7, 0xea, 0xf7, 0x52, 0x94, 0x3d, 0xcd, 0xd2, 0x6d, 0x2a, 0x54, 0x59, 0x36, 0xad,
	0x82, 0xd3, 0x25, 0x38, 0xf5, 0x85, 0x25, 0x43, 0xb0, 0x56, 0xec, 0x30, 0xed, 0x11, 0x07, 0xfa,
	0xbf, 0x21, 0x5e, 0x4e, 0x0d, 0xe2, 0x82, 0xfd, 0xae, 0xc8, 0xc5, 0x1f, 0x53, 0x53, 0x8a, 0xbf,
	0x23, 0xe3, 0x53, 0x6b, 0xf9, 0xb7, 0x09, 0x7d, 0xd9, 0x59, 0xf2, 0x0a, 0xe0, 0x78, 0xd2, 0x08,
	0xe9, 0x1e, 0xbb, 0xf9, 0x38, 0x6a, 0x23, 0x08, 0x7b, 0x72, 0xcb, 0xf1, 0xfa, 0x12, 0xd2, 0xbd,
	0xcb, 0xdd, 0x2d, 0x5f, 0x02, 0x1c, 0x69, 0x12, 0x12, 0x75, 0xf8, 0xcf, 0x9f, 0x47, 0x5d, 0xdc,
	0x61, 0x8f, 0x7c, 0x02, 0x43, 0x7d, 0xc3, 0xc8, 0xb3, 0xe8, 0xfa, 0x5d, 0xeb, 0xbe, 0xe5, 0x53,
	0x70, 0x25, 0x01, 0xa9, 0x96, 0x64, 0x14, 0xb5, 0x60, 0x75, 0xbc, 0x9f, 0x19, 0x17, 0x03, 0xf5,
	0xc3, 0xfe, 0xfc, 0x43, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x9f, 0x1d, 0x94, 0xdd, 0x07, 0x00,
	0x00,
}
